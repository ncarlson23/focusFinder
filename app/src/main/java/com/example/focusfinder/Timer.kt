package com.example.focusfinder

/**
 * Timer.kt
 * implements the focus timer for focus finder app
 * uses a count down timer in android
 * confetti appears when the clock hits zero
 * takes an input in minutes
 * can pause and reset timer
 *
 * count down timer implemented based on the following article
 * https://medium.com/@olajhidey/working-with-countdown-timer-in-android-studio-using-kotlin-39fd7826e205
 *
 * confetti implemented based on the following github repository and stack overflow article
 * https://github.com/DanielMartinus/Konfetti
 * https://stackoverflow.com/questions/67467704/positioning-setting-direction-of-confetti-android
 *
 * note the dependencies added to grade for confetti implementation
 */

import android.graphics.Color
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.TextView
import androidx.navigation.fragment.findNavController
import android.os.CountDownTimer
import android.util.Log
import android.widget.EditText
import nl.dionsegijn.konfetti.models.Shape.Companion.CIRCLE
import nl.dionsegijn.konfetti.models.Shape.Companion.RECT
import nl.dionsegijn.konfetti.models.Size


class Timer : Fragment() {

    // lateinit vars
    lateinit var home_button: Button
    lateinit var timer: TextView
    lateinit var start_button: Button
    lateinit var reset_button: Button
    lateinit var time_text: EditText

    lateinit var countdown_timer: CountDownTimer
    lateinit var confetti: nl.dionsegijn.konfetti.KonfettiView


    var START_MILLI_SECONDS = 0L  // reset back to 0:0
    var isRunning: Boolean = false
    var time_in_milli_seconds = 0L

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
    }

    // autogenerated
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // connect lateinit vars to corresponding xml components
        home_button = view.findViewById(R.id.timer_home_button)
        timer = view.findViewById(R.id.timer)
        start_button = view.findViewById(R.id.button)
        reset_button = view.findViewById(R.id.reset)
        time_text = view.findViewById(R.id.time_edit_text)
        confetti = view.findViewById(R.id.viewKonfetti)


        // nav button to dashboard
        home_button.setOnClickListener {
            findNavController().navigate(R.id.action_global_dashboard)
        }

        // start button for the timer
        start_button.setOnClickListener {
            // if the clock is running then pause the timer
            if (isRunning) {
                pauseTimer()
            }
            // otherwise start the timer
            else if (time_text.text.isNotEmpty()) {
                val time = time_text.text.toString()
                time_in_milli_seconds = time.toLong() * 60000L
                startTimer(time_in_milli_seconds)
            }
        }

        // reset the timer button
        reset_button.setOnClickListener {
            resetTimer()
        }
    }

    // pause the timer
    fun pauseTimer() {
        start_button.text = "Start"
        countdown_timer.cancel()
        isRunning = false
        reset_button.visibility = View.VISIBLE

    }


    // start the timer
    fun startTimer(time_in_seconds: Long) {
        countdown_timer = object : CountDownTimer(time_in_seconds, 1000) {

            // essential method
            // this happens when the clock hits 0
            override fun onFinish() {
                timer.text = "done!"
                loadConfeti()
            }

            // update the UI on each tick of clock
            override fun onTick(p0: Long) {
                time_in_milli_seconds = p0
                updateTextUI()
            }
        }

        // start the timer
        countdown_timer.start()
        isRunning = true
        start_button.text = "Pause"
        reset_button.visibility = View.INVISIBLE
    }

    // reset the timer to 0:0
    fun resetTimer() {
        time_in_milli_seconds = START_MILLI_SECONDS
        updateTextUI()
        reset_button.visibility = View.INVISIBLE
    }

    // update the time on the clock after each tick
    fun updateTextUI() {
        val minute = (time_in_milli_seconds / 1000) / 60
        val seconds = (time_in_milli_seconds / 1000) % 60

        timer.text = "$minute:$seconds"
    }

    // display confetti when the clock reaches the end of the time
    fun loadConfeti() {
        confetti.build()
            .addColors(Color.YELLOW, Color.GREEN, Color.MAGENTA)
            .setDirection(0.0, 359.0)
            .setSpeed(1f, 5f)
            .setFadeOutEnabled(true)
            .setTimeToLive(2000L)
            .addShapes(CIRCLE, RECT)
            .addSizes(Size(12))
            .setPosition(-50f, confetti.width + 50f, -50f, -50f)
            .streamFor(300, 5000L)
    }

    // autogenerated
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_timer, container, false)
    }
}